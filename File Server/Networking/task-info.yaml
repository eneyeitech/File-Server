type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            Advisor advisor = new Advisor();
            advisor.start();
        }
    }
  learner_created: false
- name: src/server/Executor.java
  visible: true
  text: |
    package server;

    import java.io.File;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Executor {
        final static String PATH = "C:\\Users\\eneye\\Documents\\Abdulmumin\\files\\";
        //final static String PATH = "C:\\Users\\eneye\\IdeaProjects\\File Server\\File Server\\task\\src\\server\\";
        //final static String PATH = "/home/feztix/documents/coding/java/idea_projects/File_Server/File Server/task/src/server/";

        public static boolean checkValidName(String fileName){
            final String regex = "file(10|[1-9])";
            final String string = fileName;

            final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
            final Matcher matcher = pattern.matcher(string);

            // matches return true if all string matches to pattern
            return matcher.matches();
        }

        /**
         *
         * @param fileName Name of the file to add
         * @return String, formatted output data
         */
        public static String addFile(String fileName){
            // Check if name of file is valid
            if (! checkValidName(fileName)){
                return "Cannot add the file " + fileName;
            };

    //        // создадим новый файл
    //        File file = new File(Executor.PATH + fileName);
    //        if (file.exists()){
    //            return  "The file " + fileName + " added successfully";
    //        }
    //        try
    //        {
    //            boolean created = file.createNewFile();
    //            if(created)
    //                return "Cannot add the file " + fileName;
    //        }
    //        catch(IOException ex){
    //
    //            return ex.getMessage();
    //        }

            try {
                File file = new File(Executor.PATH + fileName);

                if(file.exists()){
                    return "Cannot add the file " + fileName;
                }
                boolean createdNew = file.createNewFile();
                if (createdNew) {
                    return  "The file " + fileName + " added successfully";
                } else {
                    return "Cannot add the file " + fileName;
                }
            } catch (Exception e) {
                return e.toString();
            }
        }

        /**
         * Adding files ./files/
         * @return - String, formatted output data
         * @param fileName, name of the file we'll get
         */
        public static String getFile(String fileName){
            File file = new File(Executor.PATH + fileName);

            try (Scanner scanner = new Scanner(file)) { // it throws FileNotFoundException
                // ЧТЕНИЕ ФАЙЛА
    //            while (scanner.hasNext()) {
    //                return scanner.nextLine() + " ";
    //            }
                return "The file " + fileName + " was sent";
            } catch (java.io.FileNotFoundException e) {
                return "The file " + fileName + " not found";
            }
        }

        public static String delFile(String fileName){
            File file = new File(Executor.PATH + fileName);

            if (file.delete()) {
                return "The file " + fileName + " was deleted";
            } else {
                return "The file " + fileName + " not found";
            }
        }
    }
  learner_created: false
- name: src/server/Advisor.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Advisor {

        public void start() {
            Scanner scanner = new Scanner(System.in);


            while (true) {
                String[] query = scanner.nextLine().split(" ");
                switch (query[0]) {
                    case "add":
                        PrintService.print(Service.addFile(query[1]));
                        break;
                    case "get":
                        PrintService.print(Service.getFile(query[1]));
                        break;
                    case "delete":
                        PrintService.print(Service.delFile(query[1]));
                        break;
                    case "exit":
                        System.exit(0);
                    default:
                        // throw new NumberFormatException("Invalid random type");
                        System.out.println("Cannot Execute The Query");
                }
                //query = scanner.nextLine().split(" ");
            }

        }
    }
  learner_created: false
- name: src/server/PrintService.java
  visible: true
  text: |
    package server;

    public class PrintService {
        public static void print(String _data){

            System.out.println(_data);

        }
    }
  learner_created: false
- name: src/server/Service.java
  visible: true
  text: |
    package server;

    public class Service {
        /**
         * Adding files ./files/
         * @return - String, formatted output data
         * @param fileName, Name of the file to add
         */
        public static String addFile(String fileName) {
            return Executor.addFile(fileName);
        }

        /**
         * get files ./files/
         * @return - String, formatted output data
         * @param fileName, name of the file we'll get
         */
        public static String getFile(String fileName) {
            return Executor.getFile(fileName);
        }

        /**
         * Deleting files ./files/
         * @param fileName, name of the file to delete
         * @return String, formatted output data
         */
        public static String delFile(String fileName){
            return Executor.delFile(fileName);
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5426#comment
status: Unchecked
record: -1
